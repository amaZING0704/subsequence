def minSubsequence(source, target):
    # 构建一个二维数组dp，dp[i][j]表示source的前i个字符能否构成target的前j个字符
    dp = [[False] * (len(target) + 1) for _ in range(len(source) + 1)]
    
    # 初始化dp数组
    for i in range(len(source) + 1):
        dp[i][0] = True
    
    # 填充dp数组
    for i in range(1, len(source) + 1):
        for j in range(1, len(target) + 1):
            if source[i - 1] == target[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] or dp[i - 1][j]
            else:
                dp[i][j] = dp[i - 1][j]
    
    # 计算最少的子序列数量
    subseq_count = 0
    i, j = len(source), len(target)
    while j > 0:
        if not dp[i][j]:
            return -1
        while i > 0 and not dp[i - 1][j]:
            i -= 1
        subseq_count += 1
        j -= 1
        i -= 1
    
    return subseq_count

# 测试样例
print(minSubsequence("abc", "abcbc"))  # Output: 2
print(minSubsequence("abc", "acdbc"))  # Output: -1
print(minSubsequence("xyz", "xzyxz"))  # Output: 3
